<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deniz G</title>
    <description>Blog about Software on Bilingual-Turkish and English.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 05 Jul 2020 17:48:45 +0300</pubDate>
    <lastBuildDate>Sun, 05 Jul 2020 17:48:45 +0300</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Cloud and Serverless Turkey Ramazan Özel [TR]</title>
        <description>&lt;p&gt;Merhabalar,&lt;/p&gt;

&lt;p&gt;Ramazan ayı boyunca Cloud and Serverless Turkey meetup ekibi haftada bir yada iki olmak üzere, ben gibi Cloud’a yeni başlayacaklar için çok yararlı olacak online etkinlikler düzenledi. Ben de dinlerken bazı önemli gördüğüm noktaları not aldım ve blog’uma aktarmak için şu an zaman bulabildim.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kommunity.com/cloud-and-serverless-turkey/events/serverless-turkiye-ile-ramazan-ozel-134b33a1&quot;&gt;Etkinlik Sayfası&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;6 Mayıs Çarşamba - AWS Global infrastructure: Uygulamamı us-east-1’a deploy ettim patladı, orucum kabul olur mu?&lt;/li&gt;
  &lt;li&gt;12 Mayıs Salı - DevOps vs SRE: hangisi daha çok sevap point kazandırır?&lt;/li&gt;
  &lt;li&gt;15 Mayıs Cuma - Cold Start ve diğer Serverless problemleri: İstemeden Cold Start’a yakalandım, orucum bozulmuş olur mu?&lt;/li&gt;
  &lt;li&gt;18 Mayıs Pazartesi - Container vs Serverless: Containerlar ile Serverless fonksiyonları beraber kullanmak caiz midir?&lt;/li&gt;
  &lt;li&gt;21 Mayıs Perşembe - Cloud’a nasıl başlarım: Cloud korkularımı yenmek için ne yapmayalım?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;AWS Bulut Altyapısı Bileşenler: Zone, Region, CDN ve daha fazlası&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Sn4sSTtYj-A&quot; title=&quot;AWS Bulut Altyapısı Bileşenler&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/Sn4sSTtYj-A/0.jpg&quot; alt=&quot;AWS Bulut Altyapısı Bileşenler&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS altyapısı ile ilgili kavramları (Regions, AZ-Availability Zones, Local Zones, Point of Presence, Network) görsel olarak anlatan bir site.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://infrastructure.aws&quot; target=&quot;_blank&quot;&gt;infrastructure.aws&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Region seçimindeki en büyük fark lateny. Türkiye için genelde Frankfurt tercih ediliyor. (60-80ms round trip latency) Mesela Dublin için 130ms. Rakamların anlam kazanması için; insanın gözünü açıp kapatması 300ms sürüyor.&lt;/p&gt;

&lt;p&gt;Bulunduğunuz bölgeden region’lara olan latency’i hesaplayan bir site. Region seçiminde faydalı olabilir.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cloudping.info/&quot; target=&quot;_blank&quot;&gt;cloudping.info&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Peki region, latency harici neye göre seçilmeli? Yeni servis ya da yeni eklenen özellik hemen tüm region’lara gelmiyor. Genelde avrupa için ilk region olan Dublin’e geliyor. Tabii, müşteri profiline göre de bir etkisi var. IoT sektörü oralarda daha gelişmiş olduğu için IoT özellikleri genelde Frankfurt’a geliyor.&lt;/p&gt;

&lt;p&gt;Her servisin fiyatı her region’da aynı değil, maliyete göre fiyatlandırma yapılıyor; enerji maliyeti, insan gücü maliyeti vs. Mesela Amerika’da enerji, Amazon’un kendi güneş panellerinden üretildiği için oradaki servisler daha ucuz.&lt;/p&gt;

&lt;p&gt;AZ-Availability Zones = Datacenter Cluster&lt;/p&gt;

&lt;p&gt;Az to AZ latency: 2-4 ms&lt;/p&gt;

&lt;p&gt;Veriyi region’a yükleyince, arka planda birden cok AZ’ye replica ediyor. Yüzde 99,9…(9 tane 9) availability sağlıyor. Veri sadece o region’da, regionlar arası kopyalama yok. Böylece Türkiye bir gün region olursa, veri Türkiye dışına çıkmıyor, yani KVKK’ya uyuyor.&lt;/p&gt;

&lt;p&gt;Local Zone= Tek datacenter ve bir region’a bağlı. Altyapıyı hızlı şekilde kurmak için, tüm servisler yok, amaç ihtiyaca göre hızlı cevap verecek şekilde tasarlamak, diğer türlü AZ tasarlamak zor.&lt;/p&gt;

&lt;p&gt;Point of Presence ile latency’i azaltmaya yönelik region’a giden yolda cache noktaları var.&lt;/p&gt;

&lt;p&gt;Spot instance: Çok kullanılmayan makinelerde (mesela milanda daha az kullanıcı varsa) daha ucuz maliyetle servisleri kullanabilme imkanı var, açık artırma gibi. Diğer kullanım yöntemleri on-demand ve reserved instances.&lt;/p&gt;

&lt;p&gt;Ya region fail olursa? O zaman region bazında high availability seçeceksin. Uygulamayı iki regiona dağıtacaksın. Bu da x2 maliyet demek. Ortada bir trade-off var: risk mi maliyet mi? Ama zoned-based architecture yeterince güvenli.&lt;/p&gt;

&lt;p&gt;AWS neye göre region kuruyor? return of invesment: yatırımı kaç senede cıkarabilirim?&lt;/p&gt;

&lt;p&gt;AWS re:Invent 2016: Amazon Global Network Overview with James Hamilton&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=uj7Ting6Ckk&quot; target=&quot;_blank&quot;&gt;AWS arkasındaki mühendislik&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevOps ve SRE farkı nedir?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=WiYBsY_6FFU&quot; title=&quot;DevOps ve SRE farkı nedir?&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/WiYBsY_6FFU/0.jpg&quot; alt=&quot;DevOps ve SRE farkı nedir?&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Farklarında önce bir benzerliği, ikisi de cross-functional team.&lt;/p&gt;

&lt;p&gt;DevOps, developerlar işini yapabilsin diye kod hariç herşeyi yapan kesim. Yazılım sektörüyle ilgili teknik pratikleri içerir.&lt;/p&gt;

&lt;p&gt;SRE-Site Reliability Engineer, ilk olarak Google tarafından uygulanmıştır. google’ın tanımına göre yazılımcıya SysAdmin işlerini vermeye deniyor.&lt;/p&gt;

&lt;p&gt;SRE implements DevOps.&lt;/p&gt;

&lt;p&gt;SRE’in ana görevi reliability, yani üründe çıkan soruları çözerek ürünün ayakta sağlam şekilde olmasında sorumlu, bunu da Scalability, Security, Monitoring, Automation gibi DevOps süreçleriyle sağlıyor. Burası işinin %50’si. Kalan %50’si ile yazılım yaparak ürün geliştirme. Ama bu geliştirme domain’e yönelik değil, developer’ların kullanacağı ürünler. Yani infrastructure development.&lt;/p&gt;

&lt;p&gt;SRE, şirket içindeki en güçlü yazılım mühendisleridir,koçluk yaparlar, best practice’leri anlatırlar, 2-3 ay bir takıma giderler ve reliability olmayı öğretirler.&lt;/p&gt;

&lt;p&gt;Altyapıdaki know-how’ı almak, kişileri bu altyapıya entegre etmek aylar sürebilir. SRE’in altyapıda kullanılan herşey hakkında, normalin ilerisinde bilgisi olmalıdır.&lt;/p&gt;

&lt;p&gt;Altyapı çok sancılı bir süreç. Herşeyi tasarladın yaptın ettin ama buna adapte olacak kimse yoksa, yine reliability’in kırılıyor.&lt;/p&gt;

&lt;p&gt;Developer’ların kafkayı nasıl scale edeceğini bilmesi gerekmiyor, ama oraya nasıl mesaj atacak bilebilmeli. Buradaki ownership, takımlarda değil SRE’de. Developer nasıl kullanacağını biliyor ama nasıl çalışıyor bilmiyor. Serverless’a yakın bir sistem sunuluyor aslında. Shared-Responsibility.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jbd.dev/prod-readiness/&quot; target=&quot;_blank&quot;&gt;https://jbd.dev/prod-readiness/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/google-cloud/production-guideline-9d5d10c8f1e&quot; target=&quot;_blank&quot;&gt;https://medium.com/google-cloud/production-guideline-9d5d10c8f1e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FaaS - Serverless (AWS Lambda) Problemleri ve Çözümleri&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=keNdLKPi2gQ&quot; title=&quot;FaaS - Serverless (AWS Lambda) Problemleri ve Çözümleri&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/keNdLKPi2gQ/0.jpg&quot; alt=&quot;FaaS - Serverless (AWS Lambda) Problemleri ve Çözümleri&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Lambda, tam karşılığı FaaS, büyük uygulamaları input ve output olacak şekilde küçük function’lara bölüyoruz. Nerede nasıl hangi serviste çalışacak, scalabilty’si bizi ilgilendirmiyor, bunlarla serverless ilgileniyor. Aslında adı da buradan geliyor, server’ları bizden soyutladığı için serverless deniliyor, yoksa arka planda yine server’larda çalışıyor. AWS Lambda, stateless bir servis. Ayrıca event-driven. Mesela S3’e dosya eklendi, bu create event yaratır, lambda bunu yakalayarak trigger’lanabilir. Event nasıl gelecek, nasıl işleyeceğim diye endişelenmiyorsun, geldiği an işliyorsun ne güzel.&lt;/p&gt;

&lt;p&gt;Lambda Problemleri&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cold Start&lt;/strong&gt;; Initialize olma süresine cold start deniyor. Lambda container’lar üzerinde çalışıyor. Uygulamaya request geldiğinde, lambda önce hazırda varsa ona yonlendiriyor, yoksa yeni container ayağa kaldırıyor. Container’lar hızlı ayağa kalkıyor ama buradaki asıl sorun uygulamanın ayağa kalkması. Mesela spring saniyelerce sürüyor. Bu genelde Java sorunu, Spring’i lambda’ya olduğu gibi taşırsan oooooppppsssss.&lt;/p&gt;

&lt;p&gt;Lambda işi bitince, container’ı freeze ediyor, request gelince tekrar unfreeze ediyor. Belli süre request gelmezse, buna zaten istek gelmiyor deyip kendini kapatıyor. Bu yüzden stateless olsun deniyor lambda’larınız.&lt;/p&gt;

&lt;p&gt;Bazı çözüm yolları;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;İstenilirse istenen sayıda container ayakta tutulur. Negative effect: pricing. Zaten EC2 yerine kullanma nedeni ucuza getirmek, sadece function’ın çalıştığı süredeki kaynaklar için ödeme yapılıyor.&lt;/li&gt;
  &lt;li&gt;Boş/dummy mesajlar gönderilerek kapanması önlenebilir, warmup.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;At Least One Delivery Problem&lt;/strong&gt;. Tek bir request için bir kez çalışması beklenen function’da, iki kere calısma yaşabiliyor. Çünkü exactly once maliyetli, bunu sunars throughput’u düşüyor. Idempodent işlemler sorun olmaz ama ödeme gibi önemli islemlerde birden fazla olamaz. Distributed, genelde at-least-one sunuluyor, aynı durum standart SQS’te de var.&lt;/p&gt;

&lt;p&gt;Step functions bunu cozuyor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lambda&lt;/strong&gt;, çok fazla scale edilirse &lt;em&gt;concurrent&lt;/em&gt; calışarak, on-demand servisere mesela RDS’e birçok connection açılabiliyor. Lambda’da bu, concurrent execution limit ile sınırlanabiliyor, peki ama gercekten scale etmesi gerekirse o zaman edemez. RDS özelinde bu, RDS proxy ile direkt DB’ye connection açmak yerine proxy’e açılarak çözülüyor. Proxy, fiziksel connectionları yönetiyor, bu sayede yükün çoğu proxy’e biniyor.&lt;/p&gt;

&lt;p&gt;OpsGenie 40.000 $’lık fail hikayesi. Cloudwatch’a log geldikçe lambda yakalıyor ve graylog’a gönderiyor.
Graylog down oluyor. buraya gönderilemeyen mesajlar dead letter queue’da birikiyor. Lambda DLQ’dan tekrar tekrar trigger oluyor. 2 hafta boyunca queue büyüdükçe lambda sürekli scale oluyor. Sonuç 40bin dolar fatura.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Monitoring ve Debugging&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lambda dışarıdan connection kabul etmiyor. Nedeni VPC, ona adres atamıyor. Ancak API Gateway ile dışarıdan erişilebilir.&lt;/p&gt;

&lt;p&gt;Lambda yalnızca request’i işlerken aktif, o yüzden iş bitince arkada logu gonderecek bir şey yok. Her an ölebilir, donabilir, loglar da gönderilmeden kalabilir. mesela Elasticsearch API ile göndermek uygulamayı ağırlaştırır, o yüzden bir seçenek değil.&lt;/p&gt;

&lt;p&gt;Uygulamada debugging nasıl oluyorr? IDE, uygulamaya network connection açıyor. Debug ile alakalı komutlar, bu TCP connection üzerinden gidiyor. Lambda da dışarıdan bağlanamıyosun, ee? Thundra, bu workaround’da çalışıyor. IDE ve lambda ortada broker’da buluşuyor. Kullanıcılar local IDE’sinden debug edebiliyor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@serhatcan/how-aws-lambda-team-made-my-two-years-old-talk-completely-irrelevant-1c74c528ca78&quot; target=&quot;_blank&quot;&gt;How AWS Lambda team made my two years old talk completely irrelevant by Serhat Can&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bulutta Yüksek Performanslı ve Verimli Sistem Tasarlama&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=nuOCuAwQwvo&quot; title=&quot;Bulutta Yüksek Performanslı ve Verimli Sistem Tasarlama&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/nuOCuAwQwvo/0.jpg&quot; alt=&quot;Bulutta Yüksek Performanslı ve Verimli Sistem Tasarlama&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Metrics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;İşler iyi gitmiyorsa problemin nerede olduğu metric’lerden anlaşılır. O yüzden iyi bir sistem tasarlarken metric toplamak, özellikle hangi metric’ler toplanacak önemli. Mesela dışarıya API sunuluyorsa bu metricler latency, erros, CPU/memory/IO olabilir. Latency yüksekse client, sistem performansından memnun olmaz demektir, bu anlaşılır.
Avg latency’e bakmak outlier’ları gizler, bunun için performansa bakılırken avg latency yerine p90, p99, max latency ile ilgilenilmeli. (p90=percentile 90. x latency ile alakalı metric’lerin yüzde90’ı x altında.)
Max latency, sistem en kötü durumda ne kadar cevap veriyor demek, bu yüzden max’a başvurmak en iyisi.&lt;/p&gt;

&lt;p&gt;Client Error (HTTP 4xx) ignore edilebilir, ama sık sık gelirse incelenmesi gerekebilir. Server Error (5xx) aslında önemli, bu error’lara alarm kurmak iyi bir pratik.&lt;/p&gt;

&lt;p&gt;Sunucu üzerinde calısan uygulamalar icin CPU/memory/IO. Eğer memory, sınırlarda dolaşıyorsa out-of-memory yemesi işten bile değil. IO, sürekli diske yazan okuyan işlemler, belki bir kere okuyup cacheleyerek disk üzerindeki baskıyı azaltmak yerine sürekli diskten okuma, sistem yavaşlığına sebep olabilir. Bu metric ile anlaşılabilir.&lt;/p&gt;

&lt;p&gt;Servislere özel metricler; redis, lambda, sqs, knesis, dynamodb’a özel metricler. mesela sqs’de # msg visible, bir anda artarsa kuyrukta consume hızı yavaş, ileride sorun yaratabilir uyarı demek. Redis icin eviction (cache belli bir memory sınırına ulaşınca, kendisini sağlıklı tutabilmek için cache’deki varolan itemlar’den evict etme).
Eviction’ların çok olması, memory’nin yetersiz olduğuna ya da gereksiz yere çoğu şeyi cache’de tuttugumuz anlamına gelebilir.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Caching&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Amaç, optimizasyon ve daha iyi performans. Ne tür cache’lemeler yapılabilir?&lt;/p&gt;

&lt;p&gt;Read’ler icin diske gitmeden de sonuç dönebilme için cache-layer. 
Cache layer = Local Cache (remote cache’e network call atmasına gerek kalmadan) + Remote Cache(Redis, ElastiCache vb.)&lt;/p&gt;

&lt;p&gt;negative cache , positive cache. cache hata bulunursa kullanıcıya hata mı dönülsün?&lt;/p&gt;

&lt;p&gt;inline cache&lt;/p&gt;

&lt;p&gt;side cache=  cache ve db aynı yerdeyse side cache mesela dax, dynamodb önündeki cache. tek bir layer gibi geliyor.&lt;/p&gt;

&lt;p&gt;Thundering herd problem: Cachede data yok, 100 request aynı anda geldi, 100’ü de aynı anda DB’ye gidecek demek. Bunun yerine cache kısmında, cache’den arka servise erişilirken lock tutulup sadece birisi DB’ye erişebilir. Böylece arkadaki servis boğulmamış olur.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Async IO ve Non-blocking IO benzer ama detayda farklı. Async için, o thread o işi yapmak i.in baska thread’e paslıyor. Arkadaki işi paylaştığı thread’ler birbirini bekleyeebilir thread pool’da. Mesela 100 thread’lik bir pool. 101. thread pool’u bekleyecek.&lt;/p&gt;

&lt;p&gt;Non-blocking’de, beklemeden ziyade OS seviyesinde select/pool, epoll ile işlemler.&lt;/p&gt;

&lt;p&gt;Connection, elden geldiğince reuse edilmeli. keep-alive. Https için, birden fazla round trip oluyor, mesela sertikayı al gibi bir overhead. http/2, http/1 üzerine avantajlı, client’ın istemesine gerek olmadan server-push mantığı sağlıyor.&lt;/p&gt;

&lt;p&gt;İletişim protokolü uygunsa REST değil de gRPC. gRPC, default http/2 üzerinde. REST, genelde json ve xml formatında ama çok sıkıştırılmış data değil. gRPC’de data size’ı çok küçük, boylece daha az data gidip geldiği icin performanstan kazanılır.&lt;/p&gt;

&lt;p&gt;CDN kullanılmalı. DNS resolution aşamasında, CDN edge seçimi gerceklesiyor. Web sayfası icin ciddi performans sergiliyor, aksi takdirde dünyanın öbür ucuna gidip gelmesi bayağı bir network delay olur.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Redis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Redis Pipelining: redis’e tek tek gitmek yerine batch ile gitmek. Böylece tek seferde gönderilir, rediste internal olarak tek tek işlenir.&lt;/p&gt;

&lt;p&gt;Persistent olması istenmiyorsa kapatılmalı. RDB snapshot ile, periyodik aralıklarda redisin snapshot’ı diske yazılıyor, default bu var.&lt;/p&gt;

&lt;p&gt;Disk Swap; memorydeki data diske transfer edilirse yavaslık olur, disk swap kapatılması iyi olur.&lt;/p&gt;

&lt;p&gt;Komutun complexity’sinin farkında olunmalı. O(n) gibi bir komut için milyonlara item varsa, bu komut sn’ler sürebilir. Redis’in sitesinde hangi komutun ne kadar karmaşıklıkta olduğu yazıyor.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reindex’lemek. Eğer çok fazla update/delete varsa index’i yenilemek icin önemli.
Yine disk swap edilmeli. Profiling api ile, query planı görülebilir. Query hakkında nasıl çalıştığı hakkında bilgi sağlayarak bir inside verir, yani profiling ile monitoring.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Event-Driven Architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Böyle tasarlanmasının faydası? API, gelen istekle datayı yazmak icin beklememiş olacak. Baska servise delege edecek. Hatta servis, batch olarak yazarak yazdığı servisi daha fazla yormamış olur. Hem de hata durumlarında daha kolay çıkılır.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replicate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kendisine daha yakın storage’den alması. Data locality ve failover mekanizması.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Recover&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sistemin dayanıklı olmasını sağlıyor. Periyodik olarak sistem snapshot’ı alınabilir.&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Jul 2020 14:49:00 +0300</pubDate>
        <link>http://localhost:4000/2020/cloud-and-serverless-turkey-ramazan-ozel/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/cloud-and-serverless-turkey-ramazan-ozel/</guid>
        
        <category>software</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Java Magazine April 2020 [TR]</title>
        <description>&lt;p&gt;&lt;strong&gt;CDC(Consumer-Driven Contract) Test&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Microservis mimarisi, servisler arasında bircok iletisim icerir. Zaman içerisinde servislerin ürettiği veriler değişebilir, bu da aralarında input ve output bekletilerini içeren bir contract oluşturmalarına neden olur. Contract testler ile, microservisteki bileşenlerin bu contract’ı karsıladığı doğrulanır ve input/output değişimlerinde doğrulamadaki hatalarla kırılan yerlerin düzeltilmesi sağlanır.&lt;/p&gt;

&lt;p&gt;Consumer-driven demek, contract’ın consumer tarafında başlamasından kaynaklanıyor, fakat bu contract her iki tarafta da çalışıyor.&lt;/p&gt;

&lt;p&gt;Pact, consume-driven contract desteği sağlayan bir test framework’ü. Mock/Stub Http Server ile, consumer’ın istekleri ve beklediği responselar mock’lanır, böylece gerçekten provider tarafına istek atılmaz. Consumer tarafındaki bu isteklerden pact contract file adında bir kayıt oluşturulur ve pact broker’da saklanır. Bu, contractların saklanması ve paydaşlar arasında paylaşılması için repository görevi görür. Aynı istekler, bu sefer contract içindeki diğer tarafta koşturulur. Provider, bu contract’ı çeker ve consumer tarafında mock’lanan istekleri kendi üzerinde gerçek isteklerle çalıştırır ve dönen response ile contract’daki response karşılaştırılır.&lt;/p&gt;

&lt;p&gt;Aslında yukarıdaki akışın, Spring üzerine kurulu mikroservislerde CDC testleri koşturmak için yazılmış Spring Cloud Contract kütüphanesinden farkı yok.&lt;/p&gt;

&lt;p&gt;Pact, JUnit test framework’ü ve Maven/Gradle gibi build tool’ları ile sıkı sıkıya entegrasyona sahip. Consumer tarafında testi hazırlamak için Pact extension’ı ve bir annotation yeterli. Bu extension ile, Mock Http server ayarlanır ve pact contract file oluşturulur. @Pact annotation ile de, iletişimdeki input/output expectation’lar tanımlanır.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Rule 
public PactProviderRule mockProvider = new PactProviderRule(&quot;test_provider&quot;, &quot;localhost&quot;, 8080, this);

@Pact(provider=&quot;test_provider&quot;, consumer=&quot;test_consumer&quot;)
public PactFragment createFragment(PactDslWithProvider builder) {
	return builder
   .uponReceiving(&quot;a request for something&quot;).path(&quot;/hello&quot;).method(&quot;POST&quot;).body(&quot;json&quot;)
   .willRespondWith().status(200).body(&quot;json&quot;)
   .toFragment();
   // PactDslJsonBody builder sınıfı ile, static tanımlı body'ler yerine dynamic şekilde oluşurulabilir.
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Provider tarafındaki testte contract’ları doğrulamak için JUnit testi yada maven pluginleri kullanılabilir. Maven plugin ile, pact broker url’i ile yayınlanan contract’lar çekilir, mvn pact:verify ile doğrulanır.&lt;/p&gt;

&lt;p&gt;Pact State’ler ile, consumer ve provider arasında bilgi paylaşımı sağlanır, böylece provider’da testler başlamadan önce provider’a özgü ayarlamalar yapılır. Mesela ne gibi? Veritabanında benim gönderdiğim verileri ekleyerek test işlemini bu veriler üzerinden gerçekleştir gibi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JUnit5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JUnit4’den 5’e geçerken testleri yeniden düzenleyebileceğinizi düşünebilirsiniz, fakat JUnit5, JUnit4 testlerini Vintage library kullanarak çalıştırabilir. böylece eskiler üzerinde yoğunlaşmadan sadece yeni testler JUnit5 kullanılarak yazılabilir.&lt;/p&gt;

&lt;p&gt;Farklar&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;importlar org.junit yerine org.junit.jupiter.api package altında&lt;/li&gt;
  &lt;li&gt;@Test annotasyonu parametre almak yerine, özel assertions fonksiyonlara bırakıldı. mesela test sonucu beklenen hatayı belirtmek için expected property yerine assertThrows yada assertDoesNotThrow ile bu kontrol yapılacak.&lt;/li&gt;
  &lt;li&gt;annotation isimlendirmeleri değişti. mesela before ve beforeclass daha anlaşılabilir hale getirilmiş. before -&amp;gt; beforeEach, beforeClass -&amp;gt; beforeAll, ignore -&amp;gt; disabled, category -&amp;gt; tag.&lt;/li&gt;
  &lt;li&gt;assertions altındaki hata mesajları son arguman olarak geçiliyor. assertion fail olması durumunda error mesajı hazırlamak için lambda kabul edebilecekler.&lt;/li&gt;
  &lt;li&gt;assumptionlarda, condition karşılaşırsa çalışıtırılacak code lambda ile sağlanabilir hale gelebilir.&lt;/li&gt;
  &lt;li&gt;JUnit’de framework’ü yapılandırmak icin RunWith kullanarak extension’lar belirtiliyor, mesela @RunWith(SpringJUnit4ClassRunner.class). JUnit4’de her class için yalnız bir tane extension belirtilebiliyorken, daha fazlası için Rule ve ClassRule annotation’lı değişkenler tanımlamak gerekiyordu. JUnit5 ile extensionlar geliştirildi. Artık RunWith/Rule ve Classsrule yerine, ExtendWith ve RegisterExtension ile birçok extension kullanılabilir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yeni Eklenenler&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@DisplayName. sınıf ve test-case’lerden önce, amaçlarını belirtmek için kullanılır.&lt;/li&gt;
  &lt;li&gt;@Test propertylerini karşılayacak yeni assertions methodları.&lt;/li&gt;
  &lt;li&gt;@Nested ile nested test classları. böylece tek bir sınıfın farklı amaçlarla yazılan test-case’leri farklı test sınıflarında yazılmak yerine aynı nested class’ta yazılır, böylece benzer test-case’ler aynı nested class’ta gruplanmış olur.&lt;/li&gt;
  &lt;li&gt;parameterized tests. JUnit4’de bu dışarıdan sağlanan library ile vardı, fakat artık built-in destek var.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@ParameterizedTest
@ValueSource(strings = {&quot;foo&quot;, &quot;bar&quot;}) // source tipleri; value, empty, null, enum, arguments, method, csv
public void test(String args) {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;@RepeatedTests ile testi istenilen sayıda tekrar çalıştırma&lt;/li&gt;
  &lt;li&gt;conditional test execution. belirtilen koşula göre @Disabled olup olmamasını belirliyor. @EnabledOnX, @EnableIfX&lt;/li&gt;
  &lt;li&gt;test templates ve dynamic tests. detayları araştırınca ekleyeceğim.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Micronaut ve SSE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bu iki konu üzerine bir örnek geliştirme yazısı var, bu ikisini ilk defa duydum.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Micronaut is a modern, JVM-based, full-stack framework for building modular,  easily testable microservice and serverless applications. Micronaut has built-in support for Kafka, RabbitMQ, and two HTML5 messaging paradigms: server-sent events (SSE) and WebSocket. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Micronaut, Spring Boot ile karşılaştırıldığında daha hızlı ayağa kalkma (runtime yerine compile time dependency injection’dan dolayı), daha düşük memory tüketimi ve daha fazla isteğe cevap verebilme kabiliyetine sahip.&lt;/p&gt;

&lt;p&gt;SSE(Server-Sent Events), WebSocket’e benzer bir yapı. İkisi de push technology, fakat WebSocket’te bi-directional veri akışı varken, SSE’de sadece server’dan client tarafına veri akışı var.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Apr 2020 17:19:00 +0300</pubDate>
        <link>http://localhost:4000/2020/java-magazine-april-2020/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/java-magazine-april-2020/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;Hello, I’ve started writing here in Oct 13, 2018 by using Hugo static website creator.&lt;/p&gt;

&lt;p&gt;My motivation was to help others in some way by writing about my research about the topics that interested to me in daily life, or the problems and solutions that I have encountered in the business and that have kept me busy for a long time.&lt;/p&gt;

&lt;p&gt;Now, in coronavirus days, I got bored and decided to change the site by using Jekyll jekyll-uno theme. I will continue to write my articles with the new look.&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Mar 2020 12:04:23 +0200</pubDate>
        <link>http://localhost:4000/2020/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/welcome-to-jekyll/</guid>
        
        <category>software</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Java Magazine February 2020 [TR]</title>
        <description>&lt;p&gt;&lt;strong&gt;Jakarta Neyin Nesi?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Oracle, Java EE’yi Eclipse Foundationa transfer etmeye karar veriyor. Codebase’in büyüklüğünden dolayı 3 asamaya ayırıyorlar.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Yalnızca son sürümlerin specification ve kodu alınıyor ve artık javax değil jakarta group-id altında build’ler yayınlıyorlar. Önceki sürümler maintain edilmiyor. Aslında jakarta sürümü ile javax son sürümü birbirinin aynısı.&lt;/li&gt;
  &lt;li&gt;Yeni specification process (jesp-jakarta ee specification process), yeni terimler/ürün adları tanımlanıyor. Öncesinde jcp-java community process ile, jsr-java specification requestler ile sağlanıyordu. Yeni ürünlerin ismi jakarta ile başlıyor, eski isimlerdeki api, service, architecture vs kaldırılıyor. Yeni ürünler boş specification documentler ile yayınlanıyor. Çünkü eskileri temiz hale getirmek uzun zaman alabilirdi.&lt;/li&gt;
  &lt;li&gt;Specification document’larin update edilmesi. Yeni sürüm Java 8’de olacak ama Java 11 üzerinde calısabilecek. (tck=technologicy compatibility kit) Bu önemli cunku Java geriye donuk uyumlulugu bozup J ava11’de Java 8 olan ozellikleri cıkarmıstı. Mesela Java 8’deki uygulamaların Java 11’de derlenebilmesi icin jaxb gerekiyor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Son sürüm Java EE8 idi. Tüm bu aşamalar tamamnlanınca sürüm adı Jakarta EE9. Aslında ekstra özellik yok. Jakarta EE10, yeni özelliklerin ekleneceği ilk sürüm olacak.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java 14 ile Gelen Ozellikler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Scheduled for release on March 17, 2020.&lt;/p&gt;

&lt;p&gt;Java sürüm politikası için ek bilgi; Java 11’den itibaren 3 yılda bir major release(lts) cıkılacak. 6 ayda bir de minor releaseler. Sıradaki major release 2021, java 17 ile. son major release Java 11. Javada minor releaselerdeki feature’lar, sonraki sürümlerde feedback üzerine değiştirmek ve kaldırmak icin preview olarak tasarlanıyor. (preview featureları kullanabilmek icin compile time ve runtime’da enable edilmeli.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javac --enable-preview --release &amp;lt;number&amp;gt; x.java
java --enable-preview x.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Switch expressionlar kalıcı hale geldi. Java 12’de preview olarak eklenip, 13’de preview olarak geliştirilmişti.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Multiline text blocks. Java13’de preview olarak geldi ve hala oyle kalacak, geliştirmeler olacak. \s single space ve \ ile her satırın sonuna new line eklenmesinin önüne geçilir.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pattern matching for instanceof. Yeni preview feature. Conditional statement’ta instaceof ile işleme sokulmuş instance’ın koşulu geçerse explicit cast yapılmasının önüne geçilir. 2011’deki araştırma raporuna göre castların %24’ününün öncesinde instanceof varmış.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (obj instanceof Group) {
  Group group = (Group) obj;
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;yerine&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(obj instanceof Group group) {
	... // artık işlemler group üzerinden
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Records. Yeni preview feauture. public record constructorname(…params) ile hashCode, equals, toString implementaasyonu
sağlanır. elle yazmaya gerek kalmaz. hali hazırda ide’lerle bu sağlanıyor, artık dilin kendi yapısıyla sağlanacak. mesela ilk başta ide tarafından otomatik get, hashCode, equals olusturuldu. sınıfa daha sonradan field eklenince buralar update edilmezse, izini nasıl süreceksin?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Helpful NullPointerExceptions. user.getLocation().getCity().getName() gibi yapıda null hatası çıksa, nerede
çıktığını bulmak zor. 3 farklı yerde çıkabilir. Yeni JVM feeture ile daha bilgilerindirici mesaj verilecek. default’ta enabled değil, JVM flag ile kullanılmalı.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -XX:+ShowCodeDetailsInExceptionMessages 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Java Flight Recorder, Java Mission Control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JFR ve JMS, JVM running applicationlar icin profiling ve monitoring technologies. JFR is event-based profiling engine for writing events in binary format. JMC is GUI tool for examining a data file created by JFR from the telemetry of single JVM.&lt;/p&gt;

&lt;p&gt;JDK11’e kadar ücretliyken open-source’a çevrildi.&lt;/p&gt;

&lt;p&gt;Java 14 ile yeni JFR feature ile, JFR sürekli olarak event’ların stream’ini üretir ve event’lerin hemen handle edilmesini sağlar.
Eski halinde profiling datanın oldugu dosya olusturulup oradan parse ediliyordu.
JFR event streaming ile, JFR event’lar meydana geldiğinde callback alınır ve hemen cevap verilir. &lt;strong&gt;java agent için güzel bir use-case.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JFR recordingi enable icin&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-XX:StartFlightRecording:&amp;lt;options&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;jpc-profiling configuration dosyalarıyla hangi metricler toplanacak belirlenir. ya da optionsa hangi data, ne kadar süre saklanacak ve hangi dosyada saklanacak belirlenir. Başlatırken ayarlamaya gerek yok, çalışan program üzerinden de “jcmd” ile aktive edilebilir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki tüm bilgiler Java Magazin’in Şubat 2020 sayısını okurken kendime özet olması ve gelecekte hatırlamam için çıkardığım/yorumladığım ve türkçeye çevirdiğim bilgilerdir. Orjinal yazılar için &lt;a href=&quot;https://blogs.oracle.com/javamagazine/?source=:em:nw:mt::RC_WWMK190726P00001:NSL400037924&amp;amp;elq_mid=157128&amp;amp;sh=2320221411180624101924012335&amp;amp;cmid=WWMK190726P00001C0007&quot;&gt;adresi&lt;/a&gt; ziyaret edebilirsiniz.&lt;/p&gt;

&lt;p&gt;Tüm özellikleri denedikçe ekstra bilgiler eklemeye çalışacağım.&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Mar 2020 17:04:23 +0200</pubDate>
        <link>http://localhost:4000/2020/java-magazine-february-2020/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/java-magazine-february-2020/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>WSL (Windows Subsystem for Linux)</title>
        <description>&lt;p&gt;I have become aware of the existence of a program called WSL (Windows Subsystem for Linux) in recent moths by suggestion of colleague.&lt;/p&gt;

&lt;p&gt;There is no installation required, just enable it from ‘Control Panel -&amp;gt; Programs -&amp;gt; Turn Windows features on or off’.&lt;/p&gt;

&lt;p&gt;It is simple/lightweight linux and designed to run simple linux commands and programs at windows. Why? Because it’s not an emulator. The emulator is called running one environment/operating system in another one. This is basically converter and converts linux/windows system calls to each other. For example, for a linux program, firstly linux system calls are converted windows system calls. Then, windows kernel response is converted linux kernel response. The program acts as it were running on the linux kernel. But, there are some limitations as you can image. The whole linux system calls must be implemented as windows system calls. You can’t use for complex programs which require heavy workload.&lt;/p&gt;

&lt;p&gt;Nevertheless, it helps me in some cases. For example, I used redis (only works on linux) last weeks without virtual machine or docker.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Aug 2019 18:04:23 +0300</pubDate>
        <link>http://localhost:4000/2019/windows-subsystem-for-linux/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/windows-subsystem-for-linux/</guid>
        
        <category>software</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Docker and VM at Windows 10</title>
        <description>&lt;p&gt;If you want to use virtual machines and docker at the same time in windows 10, you can’t. That’s the reason why.&lt;/p&gt;

&lt;p&gt;There are 2 types of virtualization technology. Type-1 works on hostmachine’s hardware and hyper-v is one example of this.
Type-2 works on operating systems and virtualbox, vmware are examples of this. So, if you intend to use docker, you need
to set hypervisorlaunchtype* in order to enable hyper-v which is used by docker, but type-2 is not available now, and vice versa.&lt;/p&gt;

&lt;p&gt;This situation is for windows 10, but docker and virtual machines work smoothly in windows 8. Why?&lt;/p&gt;

&lt;p&gt;If you look carefully, the program name is “docker for window / docker desktop) in windows 10, but “docker toolbox (called old docker)” in windows 8.
So? Docker toolbox creates virtual machine and run on it. It actually uses virtualbox and don’t need to hyper-v.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bcdedit /set hypervisorlaunchtype off/auto and reboot&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 05 Aug 2019 18:04:23 +0300</pubDate>
        <link>http://localhost:4000/2019/docker-and-vm-at-windows-10/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/docker-and-vm-at-windows-10/</guid>
        
        <category>software</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>curl -GET vs -XGET</title>
        <description>&lt;p&gt;You maybe realize that there are some requests like -GET and -XGET if you use curl. It creates the complexity about using http methods.
Do I need to use XGET or GET? The question is simple.&lt;/p&gt;

&lt;p&gt;There are some supported http methods, but for example there is no delete which used many of us.
If you type like “curl -DELETE”, it sends GET request. To address this problem, you will predefined -X before your method name like -XDELETE.&lt;/p&gt;

&lt;p&gt;This style says curl that “hey man, I want to make request with exactly this method even if you don’t support this. Don’t change it.”
So, curl configures the method name behind the -X option. In this perspective, there is no difference between -GET and -XGET because curl supports GET request.&lt;/p&gt;

&lt;p&gt;There is a sample rest api for testing purpose in internet. You can visit it from  &lt;a href=&quot;https://reqres.in/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;curl -DELETE https://reqres.in/api/users/2 =&amp;gt; it uses “get single user api” (GET /api/users/2)&lt;/p&gt;

&lt;p&gt;curl -XDELETE https://reqres.in/api/users/2 =&amp;gt; it works as expected.&lt;/p&gt;

</description>
        <pubDate>Wed, 22 May 2019 18:04:23 +0300</pubDate>
        <link>http://localhost:4000/2019/curl-xget-vs-get/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/curl-xget-vs-get/</guid>
        
        <category>software</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>About Improving Coding Skills</title>
        <description>&lt;p&gt;What do you answer if I ask for a Java code that shows the numbers divided 2 between 0 and 10?&lt;/p&gt;

&lt;p&gt;I’m sure that the majority gives the following answer (even an ordinary citizen who has no interested in the software).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/code1.png&quot; alt=&quot;code-1&quot; title=&quot;Code 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This code doesn’t give any information about your programming level, But, it shows that you are not following the enhancements in the language you are using. What about the following one?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/code2.png&quot; alt=&quot;code-2&quot; title=&quot;Code 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Writing code requires a great technical knowledge as well as ability. When I look at the code above, I see the existence of technical information such as Collections, Stream API &amp;amp;&amp;amp; Lambda Expressions and Unboxing.&lt;/p&gt;

&lt;p&gt;Of course, it is important to prioritize simplicity while doing things, but that was not what I wanted to tell.&lt;/p&gt;

</description>
        <pubDate>Sat, 08 Dec 2018 17:04:23 +0200</pubDate>
        <link>http://localhost:4000/2018/about-improve-coding-skills/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/about-improve-coding-skills/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Java Bypass SSL Verification in Spring</title>
        <description>&lt;p&gt;How to bypass SSL verification in Spring?&lt;/p&gt;

&lt;p&gt;First of all, let me briefly inform you about Https. In computer networks, a message is created in the application layer and then transported to the destination by encapsulating the transport, network and link layer. In requests for Https, a request is sent from port 443 (not 80). After the server receives this request, it sends the SSL certificate including the public key to the client. The difference between Https and Http occurs in the next step. In the HTTPS request, logically the SSL/TLS layer occurs between the application and the transport layer, and the client encrypts the message to be sent by the public key in the certificate. Since the private key is on the server, the message content cannot be manipulated or read, even if the message is captured by any malicious software or user(MITM) until it exits the sender and goes to the server. Therefore, it is important that you have an SSL certificate at the relevant address when you are shopping or doing critical information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/steps.jpg&quot; alt=&quot;steps&quot; title=&quot;Code 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Have you ever noticed that in the address section of the browsers, there is information about whether the sites are reliable? So according to what is such a classification? In fact, each organization can create a certificate that contains its own private key. In order to be considered as safe in the internet environment, they are certified by the Certificate Authority which has a reliable status in the world. In other words, the certificate produced by the organization is signed by a CA. After the SSL certificate is received after
the Https request, the browser finds the CA part in the certificate. If this CA is listed in its list of trusted CAs, this certificate is trusted. If a site appears to be unsafe, even though it has SSL, its CA is not a recognized CA on the world.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ca.png&quot; alt=&quot;certificate-authority&quot; title=&quot;Code 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There was a problem in the project I was working on. In one integration, the site that was requested could not be verified by JDK because it had an unreliable CA. In this case, we would either upload the certificates to JDK’s keystore/truststore or skip to verify the SSL. The DevOps team rejected the first option by saying that if the certificate changes, it will be done installing certificates manually, making management and tracking difficult. I’ve turned to the other option. (simple) I’ve found related stackoverflow answers &lt;a href=&quot;https://stackoverflow.com/questions/12170396/disable-ssl-certificate-validation-of-https-connection&quot;&gt;1&lt;/a&gt; [2][2].&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HttpsURLConnection.setHostnameVerifier(callback function that returns true if it matches the ip address of the request site)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But I’ve done the issue, I realized that it was still getting an error after getting version. When I did a little research in the project, I found two more locations using this method in configuration beans.&lt;/p&gt;

&lt;p&gt;Now guess what’s the problem here?&lt;/p&gt;

&lt;p&gt;1- If you look at the method, there is only a way to make a use in the style of (Class).(method). The method must be a static method. Here, SetHostnameVerifier is a static method. That is, this method is not the object variable, but the class variable. All objects created have a common value.&lt;/p&gt;

&lt;p&gt;2- I said that the other places used are config beans. Beans are objects created by Spring Container. When spring runs, it starts to create objects with bean annotation.&lt;/p&gt;

&lt;p&gt;So? As the beans that use this static method are created, they start to override each other. If the bean has been created for the last time, its setting remains. For the solution, I have defined a method with the @PostContruct annotation in the Application.java, which is the main entry point of the Spring Boot. I put setHostnameVerifiers here, removing all the config beans that use it. So the problem is solved.&lt;/p&gt;

&lt;p&gt;The solution is simple, but it took me a while to understand the problem.&lt;/p&gt;

</description>
        <pubDate>Sat, 13 Oct 2018 18:04:23 +0300</pubDate>
        <link>http://localhost:4000/2018/java-bypass-ssl-verification-in-spring/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/java-bypass-ssl-verification-in-spring/</guid>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>
